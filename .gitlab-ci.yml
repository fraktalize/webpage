variables:
  GIT_STRATEGY: "clone"
  GIT_CHECKOUT: "true"
  GIT_DEPTH: "1"

stages:
  - test
  - build
  - deploy

Test backend:
  cache:
    key: build-cache:composer
    paths:
      - vendor/
  image: jitesoft/composer:latest
  stage: test
  script:
    - composer install --prefer-dist --no-interaction --no-progress --no-suggest
    - vendor/bin/phpcs -p --report=summary --standard=ruleset.xml app
    - vendor/bin/phpunit --configuration phpunit.xml --colors=never

Test Frontend:
  image: jitesoft/node-base:latest
  stage: test
  before_script:
    - npm install -g yarn gulp gulp-cli
  script:
    - yarn install
    - gulp default
    - yarn test

Build:
  stage: build
  image: docker:latest
  before_script:
      - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} registry.gitlab.com
  script:
    - echo "${ENV_FILE}" > .env
    - docker build -t ${CI_REGISTRY_IMAGE}:latest --no-cache .
    - docker push ${CI_REGISTRY_IMAGE}:latest
  after_script:
    - rm -f .env
    - docker logout registry.gitlab.com
  only:
    - master

#### Ignore.
#deploy:
#  variables:
#    HOME_DIR: /home/johannes/docker/services/jitesoft.web
#  stage: deploy
#  image: alpine
#  before_script:
#    - apk add --no-cache openssh-client
#    - eval $(ssh-agent -s)
#    - echo "${DEPLOY_KEY}" | ssh-add -
#    - mkdir -p ~/.ssh
#    - echo "${JITESOFT_SERVER_KEY}" > ~/.ssh/known_hosts
#  script:
#    - ssh ${DEPLOY_USER}@jitesoft.com 'git pull origin master'
#    - ssh ${DEPLOY_USER}@jitesoft.com 'docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} registry.gitlab.com && cd ${HOME_DIR} && docker pull ${CI_REGISTRY_IMAGE}:latest && docker service update && docker logout registry.gitlab.com'
#  environment:
#    name: Production
#  only:
#    - master
