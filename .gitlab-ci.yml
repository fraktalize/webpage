stages:
  - build
  - image
  - deploy

build:
  stage: build
  image: jitesoft/node-base
  variables:
    NODE_ENV: production
  before_script:
    - npm install -g yarn
  script:
    - yarn install
    - yarn prod
  artifacts:
    paths:
      - dist
      - Dockerfile
    when: on_success
    expire_in: 1 week

page:
  variables:
    GIT_STRATEGY: none
  stage: image
  dependencies:
    - build
  image: docker:latest
  before_script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} registry.gitlab.com
  script:
    - rm dist/index-labs.html
    - mv dist/index-page.html index.html
    - sed -i -e "/s/.js/.js?v=${CI_COMMIT_SHA}/g" dist/index.html
    - docker build -t ${CI_REGISTRY_IMAGE}/page:${CI_COMMIT_SHA} --no-cache .
    - docker push ${CI_REGISTRY_IMAGE}/page:${CI_COMMIT_SHA}

labs:
  variables:
    GIT_STRATEGY: none
  stage: image
  dependencies:
    - build
  image: docker:latest
  before_script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} registry.gitlab.com
  script:
    - rm dist/index-page.html
    - mv dist/index-labs.html index.html
    - sed -i -e "/s/.js/.js?v=${CI_COMMIT_SHA}/g" dist/index.html
    - docker build -t ${CI_REGISTRY_IMAGE}/labs:${CI_COMMIT_SHA} --no-cache .
    - docker push ${CI_REGISTRY_IMAGE}/labs:${CI_COMMIT_SHA}

deploy:
  variables:
    HOME_DIR: /home/johannes/docker/services/jitesoft.web
  stage: deploy
  image: jitesoft/alpine-ssh:latest
  before_script:
    - eval $(ssh-agent -s)
    - echo "${DEPLOY_KEY}" | ssh-add -
    - echo "${JITESOFT_SERVER_KEY}" > ~/.ssh/known_hosts
  script:
    - sed -i -e "s/latest/${CI_COMMIT_SHA}/g" docker-compose.yml
    - scp  ./docker-compose.yml ${DEPLOY_USER}@jitesoft.com:${HOME_DIR}
    - ssh ${DEPLOY_USER}@jitesoft.com "docker stack deploy -c ${HOME_DIR}/docker-compose.yml --with-registry-auth jitesoft"
